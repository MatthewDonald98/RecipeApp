{"version":3,"sources":["components/navbar.component.js","components/recipes-list.component.js","components/edit-recipe.component.js","components/create-recipe.component.js","components/create-user.component.js","components/about-page.component.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","to","Component","Recipe","props","recipe","username","ingredients","description","timeToCook","date","substring","_id","href","onClick","deleteRecipe","RecipesList","bind","state","recipes","axios","get","then","response","setState","data","catch","error","console","log","id","delete","res","this","filter","el","map","currentrecipe","key","class","recipeList","EditRecipe","onChangeUsername","onChangeIngredients","onChangeDescription","onChangeTimeToCook","onChangeDate","onSubmit","Date","users","match","params","user","e","target","value","preventDefault","post","window","location","ref","onChange","type","required","selected","CreateRecipe","length","CreateUser","newUser","AboutPage","App","path","exact","component","Boolean","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.38841b64.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nexport default class Navbar extends Component {\n\n  render() {\n    return (\n      <nav className=\"navbar navbar-dark bg-dark navbar-expand-lg\">\n        <Link to=\"/\" className=\"navbar-brand\">RecipeBook</Link>\n        <div className=\"collpase navbar-collapse\">\n        <ul className=\"navbar-nav mr-auto\">\n          <li className=\"navbar-item\">\n          <Link to=\"/\" className=\"nav-link\">Recipes</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/create\" className=\"nav-link\">Create New Recipe</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/user\" className=\"nav-link\">Create User</Link>\n          </li>\n          <li className=\"navbar-item\">\n          <Link to=\"/about\" className=\"nav-link\">About</Link>\n          </li>\n        </ul>\n        </div>\n      </nav>\n    );\n  }\n}","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport axios from 'axios';\n\nconst Recipe = props => (\n    <tr>\n      <td>{props.recipe.username}</td>\n      <td>{props.recipe.ingredients}</td>\n      <td>{props.recipe.description}</td>\n      <td>{props.recipe.timeToCook}</td>\n      <td>{props.recipe.date.substring(0,10)}</td>\n      <td>\n        <Link to={\"/edit/\"+props.recipe._id}>Edit</Link> | <a href=\"#\" onClick={() => { props.deleteRecipe(props.recipe._id) }}>Delete</a>\n      </td>\n    </tr>\n  )\n\nexport default class RecipesList extends Component {\n\n    constructor(props) {\n        super(props);\n        this.deleteRecipe = this.deleteRecipe.bind(this);\n        this.state = {recipes: []};\n      }\n      //http://localhost:5000/recipes/\n\n      componentDidMount() {\n        axios.get('/recipes/')\n         .then(response => {\n           this.setState({ recipes: response.data });\n         })\n         .catch((error) => {\n            console.log(error);\n         })\n      }\n//        axios.delete('http://localhost:5000/recipes/'+id)\n\n      deleteRecipe(id) {\n        axios.delete('/recipes/'+id)\n          .then(res => console.log(res.data));\n        this.setState({\n          recipes: this.state.recipes.filter(el => el._id !== id)\n        })\n      }\n\n      recipeList() {\n        return this.state.recipes.map(currentrecipe => {\n          return <Recipe recipe={currentrecipe} deleteRecipe={this.deleteRecipe} key={currentrecipe._id}/>;\n        })\n      }\n\n  render() {\n    return (\n        <div>\n          <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n          <h1 class=\"display-4\">Recipe Page</h1>\n          <h2 class=\"lead\">This page contains the recipes created by users and is used \n          to  to store and modify recipes </h2>\n        </div>\n      </div>\n        <table className=\"table\">\n          <thead className=\"thead-light\">\n            <tr>\n              <th>User</th>\n              <th>Ingredients</th>\n              <th>Description</th>\n              <th>Time To Cook (minutes)</th>\n              <th>Date</th>\n              <th>Modify</th>\n            </tr>\n          </thead>\n          <tbody>\n            { this.recipeList() }\n          </tbody>\n        </table>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport axios from 'axios';\n\nexport default class EditRecipe extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeIngredients = this.onChangeIngredients.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeTimeToCook = this.onChangeTimeToCook.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      username: '',\n      ingredients: '',\n      description: '',\n      timeToCook: 0,\n      date: new Date(),\n      users: []\n    }\n  }\n//    axios.get('http://localhost:5000/recipes/'+this.props.match.params.id)\n\n  componentDidMount() {\n    axios.get('/recipes/'+this.props.match.params.id)\n      .then(response => {\n        this.setState({\n          username: response.data.username,          \n          ingredients: response.data.ingredients,\n          description: response.data.description,\n          timeToCook: response.data.timeToCook,\n          date: new Date(response.data.date)\n        })   \n      })\n      .catch(function (error) {\n        console.log(error);\n      })\n      //    axios.get('http://localhost:5000/users/')\n\n\n      axios.get('/users/')\n      .then(response => {\n        this.setState({ users: response.data.map(user => user.username) });\n      })\n      .catch((error) => {\n        console.log(error);\n      })\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n  }\n\n  onChangeIngredients(e) {\n    this.setState({\n      ingredients: e.target.value\n    });\n  }\n\n  onChangeDescription(e) {\n    this.setState({\n      description: e.target.value\n    });\n  }\n\n  onChangeTimeToCook(e) {\n    this.setState({\n      timeToCook: e.target.value\n    });\n  }\n\n  onChangeDate(date) {\n    this.setState({\n      date: date\n    });\n  }\n\n  onSubmit(e) {\n    e.preventDefault();\n\n    const recipe = {\n      username: this.state.username,\n      ingredients: this.state.ingredients,\n      description: this.state.description,\n      timeToCook: this.state.timeToCook,\n      date: this.state.date,\n    };\n\n    console.log(recipe);\n\n    //    axios.post('http://localhost:5000/recipes/update/'+this.props.match.params.id, recipe)\n\n\n    axios.post('/recipes/update/'+this.props.match.params.id, recipe)\n      .then(res => console.log(res.data));\n    \n    window.location = '/';\n  }\n\n  render() {\n    return (\n      <div>\n        <h3>Edit Recipe</h3>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Username: </label>\n            <select ref=\"userInput\"\n                className=\"form-control\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}>\n                {\n                  this.state.users.map(function(user) {\n                    return <option \n                      key={user}\n                      value={user}>{user}\n                      </option>;\n                  })\n                }\n            </select>\n          </div>\n          <div className=\"form-group\"> \n            <label>Ingredients: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.ingredients}\n                onChange={this.onChangeIngredients}\n                />\n          </div>\n          <div className=\"form-group\"> \n            <label>Description: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.description}\n                onChange={this.onChangeDescription}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Time to Cook (in minutes): </label>\n            <input \n                type=\"text\" \n                className=\"form-control\"\n                value={this.state.timeToCook}\n                onChange={this.onChangeTimeToCook}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Date: </label>\n            <DatePicker\n              selected={this.state.date}\n              onChange={this.onChangeDate}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Edit Recipe\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\nimport axios from 'axios';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\n\nexport default class CreateRecipe extends Component {\n  constructor(props) {\n    super(props);\n\n    this.onChangeUsername = this.onChangeUsername.bind(this);\n    this.onChangeIngredients = this.onChangeIngredients.bind(this);\n    this.onChangeDescription = this.onChangeDescription.bind(this);\n    this.onChangeTimeToCook = this.onChangeTimeToCook.bind(this);\n    this.onChangeDate = this.onChangeDate.bind(this);\n    this.onSubmit = this.onSubmit.bind(this);\n\n    this.state = {\n      username: '',\n      ingredients: '',\n      description: '',\n      timeToCook: 0,\n      date: new Date(),\n      users: []\n    }\n  }\n  // http://localhost:5000/users/\n\n  componentDidMount() {\n    axios.get('/users/')\n        .then(response => {\n         if (response.data.length > 0) {\n        this.setState({ \n        users: response.data.map(user => user.username),\n        username: response.data[0].username\n      });\n    }\n  })\n  .catch((error) => {\n    console.log(error);\n  })\n  }\n\n  onChangeUsername(e) {\n    this.setState({\n      username: e.target.value\n    });\n}\n\nonChangeIngredients(e) {\n    this.setState({\n      ingredients: e.target.value\n    });\n  }\n\nonChangeDescription(e) {\n  this.setState({\n    description: e.target.value\n  });\n}\n\nonChangeTimeToCook(e) {\n  this.setState({\n    timeToCook: e.target.value\n  });\n}\n\nonChangeDate(date) {\n  this.setState({\n    date: date\n  });\n}\n\nonSubmit(e) {\n  e.preventDefault();\n\n  const recipe = {\n    username: this.state.username,\n    ingredients: this.state.ingredients,\n    description: this.state.description,\n    timeToCook: this.state.timeToCook,\n    date: this.state.date,\n  };\n//  axios.post('http://localhost:5000/recipes/add', recipe)\n\n  console.log(recipe);\n  axios.post('/recipes/add', recipe)\n  .then(res => console.log(res.data));\n  \n  window.location = '/';\n}\nrender() {\n    return (\n      <div>\n        <div class=\"jumbotron jumbotron-fluid\">\n          <div class=\"container\">\n            <h1 class=\"display-4\">Add a new Recipe</h1>\n           <h2 class=\"lead\">Fill in the information below to add a new recipe to the book</h2>\n         </div>\n        </div>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Username: </label>\n            <select ref=\"userInput\"\n                required\n                className=\"form-control\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}>\n                {\n                  this.state.users.map(function(user) {\n                    return <option \n                      key={user}\n                      value={user}>{user}\n                      </option>;\n                  })\n                }\n            </select>\n          </div>\n          <div className=\"form-group\"> \n            <label>Ingredients: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.ingredients}\n                onChange={this.onChangeIngredients}\n                />\n          </div>\n          <div className=\"form-group\"> \n            <label>Description: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.description}\n                onChange={this.onChangeDescription}\n                />\n          </div>\n          <div className=\"form-group\">\n            <label>Time to Cook (in minutes): </label>\n            <input \n             type=\"text\" \n             className=\"form-control\"\n             value={this.state.timeToCook}\n             onChange={this.onChangeTimeToCook}\n             />\n       </div>\n       <div className=\"form-group\">\n         <label>Date: </label>\n         <div>\n           <DatePicker\n             selected={this.state.date}\n             onChange={this.onChangeDate}\n           />\n         </div>\n       </div>\n\n       <div className=\"form-group\">\n         <input type=\"submit\" value=\"Add New Recipe\" className=\"btn btn-primary\" />\n       </div>\n     </form>\n   </div>\n )\n}\n}","import React, { Component } from 'react';\nimport axios from 'axios';\n\nexport default class CreateUser extends Component {\n\n    constructor(props) {\n        super(props);\n        this.onChangeUsername = this.onChangeUsername.bind(this);\n        this.onSubmit = this.onSubmit.bind(this);\n        this.state = {\n          username: ''\n        };\n      }\n\n      onChangeUsername(e) {\n        this.setState({\n          username: e.target.value\n        });\n      }\n      onSubmit(e) {\n        e.preventDefault();\n        const newUser = {\n          username: this.state.username,\n        };\n        //        axios.post('http://localhost:5000/users/add', newUser)\n\n        console.log(newUser);\n        axios.post('/users/add', newUser)\n         .then(res => console.log(res.data));\n        \n        this.setState({\n          username: ''\n        })\n      }\n\n  render() {\n    return (\n        <div>\n        <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n          <h1 class=\"display-4\">About Page</h1>\n          <h2 class=\"lead\">This page contains info about the app</h2>\n        </div>\n      </div>\n        <form onSubmit={this.onSubmit}>\n          <div className=\"form-group\"> \n            <label>Username: </label>\n            <input  type=\"text\"\n                required\n                className=\"form-control\"\n                value={this.state.username}\n                onChange={this.onChangeUsername}\n                />\n          </div>\n          <div className=\"form-group\">\n            <input type=\"submit\" value=\"Create User\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n      </div>\n    )\n  }\n}","import React, { Component } from 'react';\n\nexport default class AboutPage extends Component {\n  render() {\n    return (\n        <div>\n        <div class=\"jumbotron jumbotron-fluid\">\n        <div class=\"container\">\n          <h1 class=\"display-4\">About Page</h1>\n          <h2 class=\"lead\">This page contains info about the app</h2>\n        </div>\n      </div>\n      <p>Info for the about page</p>\n      </div>\n    )\n  }\n}","import React from 'react';\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nimport Navbar from \"./components/navbar.component\"\nimport RecipesList from \"./components/recipes-list.component.js\";\nimport EditRecipe from \"./components/edit-recipe.component\";\nimport CreateRecipe from \"./components/create-recipe.component\";\nimport CreateUser from \"./components/create-user.component\";\nimport AboutPage from \"./components/about-page.component\";\n \nfunction App() {\n  return (\n    <Router>\n      <div className=\"container\">\n      <Navbar />\n        <br/>\n        <Route path=\"/\" exact component={RecipesList} />\n        <Route path=\"/edit/:id\" component={EditRecipe} />\n        <Route path=\"/create\" component={CreateRecipe} />\n        <Route path=\"/user\" component={CreateUser} />\n        <Route path=\"/about\" component={AboutPage} />\n      </div>\n    </Router>\n  );\n }\n \nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}